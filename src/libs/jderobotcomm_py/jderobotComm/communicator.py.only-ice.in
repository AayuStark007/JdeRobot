import Ice

from .laserClient import getLaserClient
from .cameraClient import getCameraClient
from .pose3dClient import getPose3dClient
from .motorsClient import getMotorsClient


class Communicator:
	'''
    JdeRobotComm Communicator class

    '''
	def __init__ (self, config):
		'''
	    Communicator constructor

	    @param config: configuration of communicator
	    
	    @type config: dict

	    '''
		rosserver = False
		iceserver = False

		self.__node = None
		self.__ic = None
		self.config = config

		for i in self.config:
			if type(self.config[i]) is dict and self.config[i]["Server"] == 1:
				iceserver = True

		if iceserver:
			id = Ice.InitializationData()
			self.__ic = Ice.initialize(None, id)

	def destroy (self):
		'''
	    Destroys ROS Node and Ice Communicator if it is necessary.

	    '''
		if self.__ic:
			self.__ic.shutdown()
			self.__ic.destroy()

	def getNode(self):
		return self.__node

	def getIc(self):
		return self.__ic

	def getConfig(self):
		return self.config 


	def getCameraClient(self, name):
		'''
	    Returns a Camera client with the configration indicated by the name

	    @param name: name of the client in the config
	    
	    @type name: String

	    '''
		return getCameraClient(self, name)

	def getMotorsClient(self, name):
		'''
	    Returns a Motors client with the configration indicated by the name

	    @param name: name of the client in the config
	    
	    @type name: String

	    '''
		return getMotorsClient(self, name)

	def getPose3dClient(self, name):
		'''
	    Returns a Pose3D client with the configration indicated by the name

	    @param name: name of the client in the config
	    
	    @type name: String

	    '''
		return getPose3dClient(self, name)

	def getLaserClient(self, name):
		'''
	    Returns a Laser client with the configration indicated by the name

	    @param name: name of the client in the config
	    
	    @type name: String

	    '''
		return getLaserClient(self, name)

