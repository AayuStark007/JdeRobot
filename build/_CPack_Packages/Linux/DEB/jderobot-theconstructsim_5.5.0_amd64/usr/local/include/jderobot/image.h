// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `image.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot__root_JdeRobot_build_src_interfaces_cpp_jderobot_image_h__
#define __jderobot__root_JdeRobot_build_src_interfaces_cpp_jderobot_image_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <jderobot/common.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace jderobot
{

class ImageDescription;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ImageDescription>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::ImageDescription*);

class ImageData;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ImageData>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::ImageData*);

class ImageConsumer;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ImageConsumer>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::ImageConsumer*);

class ImageProvider;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ImageProvider>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::ImageProvider*);

}

}

namespace jderobot
{

class ImageDescription;
bool operator==(const ImageDescription&, const ImageDescription&);
bool operator<(const ImageDescription&, const ImageDescription&);
::Ice::Object* upCast(::jderobot::ImageDescription*);
typedef ::IceInternal::Handle< ::jderobot::ImageDescription> ImageDescriptionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ImageDescription> ImageDescriptionPrx;
void __patch(ImageDescriptionPtr&, const ::Ice::ObjectPtr&);

class ImageData;
bool operator==(const ImageData&, const ImageData&);
bool operator<(const ImageData&, const ImageData&);
::Ice::Object* upCast(::jderobot::ImageData*);
typedef ::IceInternal::Handle< ::jderobot::ImageData> ImageDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ImageData> ImageDataPrx;
void __patch(ImageDataPtr&, const ::Ice::ObjectPtr&);

class ImageConsumer;
bool operator==(const ImageConsumer&, const ImageConsumer&);
bool operator<(const ImageConsumer&, const ImageConsumer&);
::Ice::Object* upCast(::jderobot::ImageConsumer*);
typedef ::IceInternal::Handle< ::jderobot::ImageConsumer> ImageConsumerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ImageConsumer> ImageConsumerPrx;
void __patch(ImageConsumerPtr&, const ::Ice::ObjectPtr&);

class ImageProvider;
bool operator==(const ImageProvider&, const ImageProvider&);
bool operator<(const ImageProvider&, const ImageProvider&);
::Ice::Object* upCast(::jderobot::ImageProvider*);
typedef ::IceInternal::Handle< ::jderobot::ImageProvider> ImageProviderPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ImageProvider> ImageProviderPrx;
void __patch(ImageProviderPtr&, const ::Ice::ObjectPtr&);

}

namespace jderobot
{

typedef ::std::vector< ::std::string> ImageFormat;

}

namespace jderobot
{

class AMD_ImageProvider_getImageData : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::jderobot::ImageDataPtr&) = 0;
};

typedef ::IceUtil::Handle< ::jderobot::AMD_ImageProvider_getImageData> AMD_ImageProvider_getImageDataPtr;

}

namespace IceAsync
{

namespace jderobot
{

class AMD_ImageProvider_getImageData : public ::jderobot::AMD_ImageProvider_getImageData, public ::IceInternal::IncomingAsync
{
public:

    AMD_ImageProvider_getImageData(::IceInternal::Incoming&);

    virtual void ice_response(const ::jderobot::ImageDataPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

namespace jderobot
{

class Callback_ImageConsumer_report_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImageConsumer_report_Base> Callback_ImageConsumer_reportPtr;

class Callback_ImageProvider_getImageDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImageProvider_getImageDescription_Base> Callback_ImageProvider_getImageDescriptionPtr;

class Callback_ImageProvider_getImageFormat_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImageProvider_getImageFormat_Base> Callback_ImageProvider_getImageFormatPtr;

class Callback_ImageProvider_getImageData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImageProvider_getImageData_Base> Callback_ImageProvider_getImageDataPtr;

}

namespace IceProxy
{

namespace jderobot
{

class ImageDescription : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_secure(bool __secure) const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_twoway() const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_oneway() const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_batchOneway() const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_datagram() const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_batchDatagram() const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_compress(bool __compress) const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ImageDescription> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ImageDescription*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ImageData : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<ImageData> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_secure(bool __secure) const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_twoway() const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_oneway() const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_batchOneway() const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_datagram() const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_batchDatagram() const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_compress(bool __compress) const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ImageData> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ImageData*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ImageConsumer : virtual public ::IceProxy::Ice::Object
{
public:

    void report(const ::jderobot::ImageDataPtr& obj)
    {
        report(obj, 0);
    }
    void report(const ::jderobot::ImageDataPtr& obj, const ::Ice::Context& __ctx)
    {
        report(obj, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_report(const ::jderobot::ImageDataPtr& obj, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_report(obj, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_report(const ::jderobot::ImageDataPtr& obj, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_report(obj, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_report(const ::jderobot::ImageDataPtr& obj, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_report(obj, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_report(const ::jderobot::ImageDataPtr& obj, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_report(obj, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_report(const ::jderobot::ImageDataPtr& obj)
    {
        return begin_report(obj, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_report(const ::jderobot::ImageDataPtr& obj, const ::Ice::Context& __ctx)
    {
        return begin_report(obj, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_report(const ::jderobot::ImageDataPtr& obj, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_report(obj, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_report(const ::jderobot::ImageDataPtr& obj, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_report(obj, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_report(const ::jderobot::ImageDataPtr& obj, const ::jderobot::Callback_ImageConsumer_reportPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_report(obj, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_report(const ::jderobot::ImageDataPtr& obj, const ::Ice::Context& __ctx, const ::jderobot::Callback_ImageConsumer_reportPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_report(obj, &__ctx, __del, __cookie);
    }

    void end_report(const ::Ice::AsyncResultPtr&);
    
private:

    void report(const ::jderobot::ImageDataPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_report(const ::jderobot::ImageDataPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_secure(bool __secure) const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_twoway() const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_oneway() const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_batchOneway() const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_datagram() const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_batchDatagram() const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_compress(bool __compress) const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ImageConsumer> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ImageConsumer*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ImageProvider : virtual public ::IceProxy::Ice::Object
{
public:

    ::jderobot::ImageDescriptionPtr getImageDescription()
    {
        return getImageDescription(0);
    }
    ::jderobot::ImageDescriptionPtr getImageDescription(const ::Ice::Context& __ctx)
    {
        return getImageDescription(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getImageDescription(const ::IceInternal::Function<void (const ::jderobot::ImageDescriptionPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getImageDescription(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getImageDescription(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getImageDescription(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getImageDescription(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::jderobot::ImageDescriptionPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getImageDescription(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getImageDescription(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getImageDescription(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getImageDescription(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::ImageDescriptionPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::jderobot::ImageDescriptionPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::jderobot::ImageProviderPrx __proxy = ::jderobot::ImageProviderPrx::uncheckedCast(__result->getProxy());
                ::jderobot::ImageDescriptionPtr __ret;
                try
                {
                    __ret = __proxy->end_getImageDescription(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::jderobot::ImageDescriptionPtr&)> _response;
        };
        return begin_getImageDescription(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getImageDescription()
    {
        return begin_getImageDescription(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImageDescription(const ::Ice::Context& __ctx)
    {
        return begin_getImageDescription(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImageDescription(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageDescription(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageDescription(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageDescription(const ::jderobot::Callback_ImageProvider_getImageDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageDescription(const ::Ice::Context& __ctx, const ::jderobot::Callback_ImageProvider_getImageDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageDescription(&__ctx, __del, __cookie);
    }

    ::jderobot::ImageDescriptionPtr end_getImageDescription(const ::Ice::AsyncResultPtr&);
    
private:

    ::jderobot::ImageDescriptionPtr getImageDescription(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getImageDescription(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::jderobot::ImageFormat getImageFormat()
    {
        return getImageFormat(0);
    }
    ::jderobot::ImageFormat getImageFormat(const ::Ice::Context& __ctx)
    {
        return getImageFormat(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getImageFormat(const ::IceInternal::Function<void (const ::jderobot::ImageFormat&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getImageFormat(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getImageFormat(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getImageFormat(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getImageFormat(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::jderobot::ImageFormat&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getImageFormat(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getImageFormat(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getImageFormat(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getImageFormat(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::ImageFormat&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::jderobot::ImageFormat&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::jderobot::ImageProviderPrx __proxy = ::jderobot::ImageProviderPrx::uncheckedCast(__result->getProxy());
                ::jderobot::ImageFormat __ret;
                try
                {
                    __ret = __proxy->end_getImageFormat(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::jderobot::ImageFormat&)> _response;
        };
        return begin_getImageFormat(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getImageFormat()
    {
        return begin_getImageFormat(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImageFormat(const ::Ice::Context& __ctx)
    {
        return begin_getImageFormat(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImageFormat(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageFormat(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageFormat(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageFormat(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageFormat(const ::jderobot::Callback_ImageProvider_getImageFormatPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageFormat(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageFormat(const ::Ice::Context& __ctx, const ::jderobot::Callback_ImageProvider_getImageFormatPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageFormat(&__ctx, __del, __cookie);
    }

    ::jderobot::ImageFormat end_getImageFormat(const ::Ice::AsyncResultPtr&);
    
private:

    ::jderobot::ImageFormat getImageFormat(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getImageFormat(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::jderobot::ImageDataPtr getImageData(const ::std::string& format)
    {
        return getImageData(format, 0);
    }
    ::jderobot::ImageDataPtr getImageData(const ::std::string& format, const ::Ice::Context& __ctx)
    {
        return getImageData(format, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getImageData(const ::std::string& format, const ::IceInternal::Function<void (const ::jderobot::ImageDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getImageData(format, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getImageData(const ::std::string& format, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getImageData(format, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getImageData(const ::std::string& format, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::jderobot::ImageDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getImageData(format, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getImageData(const ::std::string& format, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getImageData(format, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getImageData(const ::std::string& format, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::ImageDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::jderobot::ImageDataPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::jderobot::ImageProviderPrx __proxy = ::jderobot::ImageProviderPrx::uncheckedCast(__result->getProxy());
                ::jderobot::ImageDataPtr __ret;
                try
                {
                    __ret = __proxy->end_getImageData(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::jderobot::ImageDataPtr&)> _response;
        };
        return begin_getImageData(format, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getImageData(const ::std::string& format)
    {
        return begin_getImageData(format, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImageData(const ::std::string& format, const ::Ice::Context& __ctx)
    {
        return begin_getImageData(format, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImageData(const ::std::string& format, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageData(format, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageData(const ::std::string& format, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageData(format, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageData(const ::std::string& format, const ::jderobot::Callback_ImageProvider_getImageDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageData(format, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageData(const ::std::string& format, const ::Ice::Context& __ctx, const ::jderobot::Callback_ImageProvider_getImageDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageData(format, &__ctx, __del, __cookie);
    }

    ::jderobot::ImageDataPtr end_getImageData(const ::Ice::AsyncResultPtr&);
    
private:

    ::jderobot::ImageDataPtr getImageData(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getImageData(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_secure(bool __secure) const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_twoway() const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_oneway() const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_batchOneway() const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_datagram() const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_batchDatagram() const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_compress(bool __compress) const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ImageProvider> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ImageProvider*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace jderobot
{

class ImageDescription : virtual public ::IceDelegate::Ice::Object
{
public:
};

class ImageData : virtual public ::IceDelegate::Ice::Object
{
public:
};

class ImageConsumer : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void report(const ::jderobot::ImageDataPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class ImageProvider : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::jderobot::ImageDescriptionPtr getImageDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::jderobot::ImageFormat getImageFormat(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::jderobot::ImageDataPtr getImageData(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace jderobot
{

class ImageDescription : virtual public ::IceDelegate::jderobot::ImageDescription,
                         virtual public ::IceDelegateM::Ice::Object
{
public:
};

class ImageData : virtual public ::IceDelegate::jderobot::ImageData,
                  virtual public ::IceDelegateM::Ice::Object
{
public:
};

class ImageConsumer : virtual public ::IceDelegate::jderobot::ImageConsumer,
                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void report(const ::jderobot::ImageDataPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ImageProvider : virtual public ::IceDelegate::jderobot::ImageProvider,
                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::jderobot::ImageDescriptionPtr getImageDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::jderobot::ImageFormat getImageFormat(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::jderobot::ImageDataPtr getImageData(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace jderobot
{

class ImageDescription : virtual public ::IceDelegate::jderobot::ImageDescription,
                         virtual public ::IceDelegateD::Ice::Object
{
public:
};

class ImageData : virtual public ::IceDelegate::jderobot::ImageData,
                  virtual public ::IceDelegateD::Ice::Object
{
public:
};

class ImageConsumer : virtual public ::IceDelegate::jderobot::ImageConsumer,
                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void report(const ::jderobot::ImageDataPtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ImageProvider : virtual public ::IceDelegate::jderobot::ImageProvider,
                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::jderobot::ImageDescriptionPtr getImageDescription(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::jderobot::ImageFormat getImageFormat(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::jderobot::ImageDataPtr getImageData(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace jderobot
{

class ImageDescription : virtual public ::Ice::Object
{
public:

    typedef ImageDescriptionPrx ProxyType;
    typedef ImageDescriptionPtr PointerType;

    ImageDescription()
    {
    }

    ImageDescription(::Ice::Int __ice_width, ::Ice::Int __ice_height, ::Ice::Int __ice_size, const ::std::string& __ice_format, const ::std::string& __ice_md5sum) :
        width(__ice_width),
        height(__ice_height),
        size(__ice_size),
        format(__ice_format),
        md5sum(__ice_md5sum)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::Ice::Int width;

    ::Ice::Int height;

    ::Ice::Int size;

    ::std::string format;

    ::std::string md5sum;

protected:

    virtual ~ImageDescription() {}

    friend class ImageDescription__staticInit;
};

class ImageDescription__staticInit
{
public:

    ::jderobot::ImageDescription _init;
};

static ImageDescription__staticInit _ImageDescription_init;

inline bool operator==(const ImageDescription& l, const ImageDescription& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ImageDescription& l, const ImageDescription& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ImageData : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef ImageDataPrx ProxyType;
    typedef ImageDataPtr PointerType;

    ImageData()
    {
    }

    ImageData(const ::jderobot::Time& __ice_timeStamp, const ::jderobot::ImageDescriptionPtr& __ice_description, const ::jderobot::ByteSeq& __ice_pixelData) :
        timeStamp(__ice_timeStamp),
        description(__ice_description),
        pixelData(__ice_pixelData)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::jderobot::Time timeStamp;

    ::jderobot::ImageDescriptionPtr description;

    ::jderobot::ByteSeq pixelData;

protected:

    virtual ~ImageData() {}
};

inline bool operator==(const ImageData& l, const ImageData& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ImageData& l, const ImageData& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ImageConsumer : virtual public ::Ice::Object
{
public:

    typedef ImageConsumerPrx ProxyType;
    typedef ImageConsumerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void report(const ::jderobot::ImageDataPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___report(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const ImageConsumer& l, const ImageConsumer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ImageConsumer& l, const ImageConsumer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ImageProvider : virtual public ::Ice::Object
{
public:

    typedef ImageProviderPrx ProxyType;
    typedef ImageProviderPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::jderobot::ImageDescriptionPtr getImageDescription(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getImageDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::jderobot::ImageFormat getImageFormat(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getImageFormat(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getImageData_async(const ::jderobot::AMD_ImageProvider_getImageDataPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getImageData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const ImageProvider& l, const ImageProvider& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ImageProvider& l, const ImageProvider& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace jderobot
{

template<class T>
class CallbackNC_ImageConsumer_report : public Callback_ImageConsumer_report_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ImageConsumer_report(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ImageConsumer_reportPtr
newCallback_ImageConsumer_report(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageConsumer_report<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImageConsumer_reportPtr
newCallback_ImageConsumer_report(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageConsumer_report<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ImageConsumer_reportPtr
newCallback_ImageConsumer_report(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageConsumer_report<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImageConsumer_reportPtr
newCallback_ImageConsumer_report(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageConsumer_report<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImageConsumer_report : public Callback_ImageConsumer_report_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ImageConsumer_report(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ImageConsumer_reportPtr
newCallback_ImageConsumer_report(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageConsumer_report<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImageConsumer_reportPtr
newCallback_ImageConsumer_report(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageConsumer_report<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ImageConsumer_reportPtr
newCallback_ImageConsumer_report(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageConsumer_report<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImageConsumer_reportPtr
newCallback_ImageConsumer_report(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageConsumer_report<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ImageProvider_getImageDescription : public Callback_ImageProvider_getImageDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::jderobot::ImageDescriptionPtr&);

    CallbackNC_ImageProvider_getImageDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::ImageProviderPrx __proxy = ::jderobot::ImageProviderPrx::uncheckedCast(__result->getProxy());
        ::jderobot::ImageDescriptionPtr __ret;
        try
        {
            __ret = __proxy->end_getImageDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ImageProvider_getImageDescriptionPtr
newCallback_ImageProvider_getImageDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::ImageDescriptionPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageProvider_getImageDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImageProvider_getImageDescriptionPtr
newCallback_ImageProvider_getImageDescription(T* instance, void (T::*cb)(const ::jderobot::ImageDescriptionPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageProvider_getImageDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImageProvider_getImageDescription : public Callback_ImageProvider_getImageDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::jderobot::ImageDescriptionPtr&, const CT&);

    Callback_ImageProvider_getImageDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::ImageProviderPrx __proxy = ::jderobot::ImageProviderPrx::uncheckedCast(__result->getProxy());
        ::jderobot::ImageDescriptionPtr __ret;
        try
        {
            __ret = __proxy->end_getImageDescription(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ImageProvider_getImageDescriptionPtr
newCallback_ImageProvider_getImageDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::ImageDescriptionPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageProvider_getImageDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImageProvider_getImageDescriptionPtr
newCallback_ImageProvider_getImageDescription(T* instance, void (T::*cb)(const ::jderobot::ImageDescriptionPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageProvider_getImageDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImageProvider_getImageFormat : public Callback_ImageProvider_getImageFormat_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::jderobot::ImageFormat&);

    CallbackNC_ImageProvider_getImageFormat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::ImageProviderPrx __proxy = ::jderobot::ImageProviderPrx::uncheckedCast(__result->getProxy());
        ::jderobot::ImageFormat __ret;
        try
        {
            __ret = __proxy->end_getImageFormat(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ImageProvider_getImageFormatPtr
newCallback_ImageProvider_getImageFormat(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::ImageFormat&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageProvider_getImageFormat<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImageProvider_getImageFormatPtr
newCallback_ImageProvider_getImageFormat(T* instance, void (T::*cb)(const ::jderobot::ImageFormat&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageProvider_getImageFormat<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImageProvider_getImageFormat : public Callback_ImageProvider_getImageFormat_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::jderobot::ImageFormat&, const CT&);

    Callback_ImageProvider_getImageFormat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::ImageProviderPrx __proxy = ::jderobot::ImageProviderPrx::uncheckedCast(__result->getProxy());
        ::jderobot::ImageFormat __ret;
        try
        {
            __ret = __proxy->end_getImageFormat(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ImageProvider_getImageFormatPtr
newCallback_ImageProvider_getImageFormat(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::ImageFormat&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageProvider_getImageFormat<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImageProvider_getImageFormatPtr
newCallback_ImageProvider_getImageFormat(T* instance, void (T::*cb)(const ::jderobot::ImageFormat&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageProvider_getImageFormat<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImageProvider_getImageData : public Callback_ImageProvider_getImageData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::jderobot::ImageDataPtr&);

    CallbackNC_ImageProvider_getImageData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::ImageProviderPrx __proxy = ::jderobot::ImageProviderPrx::uncheckedCast(__result->getProxy());
        ::jderobot::ImageDataPtr __ret;
        try
        {
            __ret = __proxy->end_getImageData(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ImageProvider_getImageDataPtr
newCallback_ImageProvider_getImageData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::ImageDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageProvider_getImageData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImageProvider_getImageDataPtr
newCallback_ImageProvider_getImageData(T* instance, void (T::*cb)(const ::jderobot::ImageDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageProvider_getImageData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImageProvider_getImageData : public Callback_ImageProvider_getImageData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::jderobot::ImageDataPtr&, const CT&);

    Callback_ImageProvider_getImageData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::ImageProviderPrx __proxy = ::jderobot::ImageProviderPrx::uncheckedCast(__result->getProxy());
        ::jderobot::ImageDataPtr __ret;
        try
        {
            __ret = __proxy->end_getImageData(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ImageProvider_getImageDataPtr
newCallback_ImageProvider_getImageData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::ImageDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageProvider_getImageData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImageProvider_getImageDataPtr
newCallback_ImageProvider_getImageData(T* instance, void (T::*cb)(const ::jderobot::ImageDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageProvider_getImageData<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
