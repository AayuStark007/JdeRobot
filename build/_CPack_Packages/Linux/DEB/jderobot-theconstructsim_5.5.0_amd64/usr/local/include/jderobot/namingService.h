// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `namingService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot__root_JdeRobot_build_src_interfaces_cpp_jderobot_namingService_h__
#define __jderobot__root_JdeRobot_build_src_interfaces_cpp_jderobot_namingService_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <jderobot/common.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace jderobot
{

class NamingNode;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NamingNode>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::NamingNode*);

class NodeContainer;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NodeContainer>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::NodeContainer*);

class NamingService;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NamingService>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::NamingService*);

}

}

namespace jderobot
{

class NamingNode;
bool operator==(const NamingNode&, const NamingNode&);
bool operator<(const NamingNode&, const NamingNode&);
::Ice::Object* upCast(::jderobot::NamingNode*);
typedef ::IceInternal::Handle< ::jderobot::NamingNode> NamingNodePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NamingNode> NamingNodePrx;
void __patch(NamingNodePtr&, const ::Ice::ObjectPtr&);

class NodeContainer;
bool operator==(const NodeContainer&, const NodeContainer&);
bool operator<(const NodeContainer&, const NodeContainer&);
::Ice::Object* upCast(::jderobot::NodeContainer*);
typedef ::IceInternal::Handle< ::jderobot::NodeContainer> NodeContainerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NodeContainer> NodeContainerPrx;
void __patch(NodeContainerPtr&, const ::Ice::ObjectPtr&);

class NamingService;
bool operator==(const NamingService&, const NamingService&);
bool operator<(const NamingService&, const NamingService&);
::Ice::Object* upCast(::jderobot::NamingService*);
typedef ::IceInternal::Handle< ::jderobot::NamingService> NamingServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NamingService> NamingServicePrx;
void __patch(NamingServicePtr&, const ::Ice::ObjectPtr&);

}

namespace jderobot
{

class NameAlreadyExistException : public ::jderobot::JderobotException
{
public:

    NameAlreadyExistException() {}
    explicit NameAlreadyExistException(const ::std::string&);
    virtual ~NameAlreadyExistException() throw();

    virtual ::std::string ice_name() const;
    virtual NameAlreadyExistException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::jderobot::JderobotException::__writeImpl;
    using ::jderobot::JderobotException::__readImpl;
    #endif
};

static NameAlreadyExistException __NameAlreadyExistException_init;

class NameNotExistException : public ::jderobot::JderobotException
{
public:

    NameNotExistException() {}
    explicit NameNotExistException(const ::std::string&);
    virtual ~NameNotExistException() throw();

    virtual ::std::string ice_name() const;
    virtual NameNotExistException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::jderobot::JderobotException::__writeImpl;
    using ::jderobot::JderobotException::__readImpl;
    #endif
};

class InterfaceNotExistException : public ::jderobot::JderobotException
{
public:

    InterfaceNotExistException() {}
    explicit InterfaceNotExistException(const ::std::string&);
    virtual ~InterfaceNotExistException() throw();

    virtual ::std::string ice_name() const;
    virtual InterfaceNotExistException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::jderobot::JderobotException::__writeImpl;
    using ::jderobot::JderobotException::__readImpl;
    #endif
};

typedef ::std::vector< ::jderobot::NamingNodePtr> nodeList;

}

namespace Ice
{
template<>
struct StreamableTraits< ::jderobot::NameAlreadyExistException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::jderobot::NameNotExistException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::jderobot::InterfaceNotExistException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace jderobot
{

class Callback_NamingService_bind_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NamingService_bind_Base> Callback_NamingService_bindPtr;

class Callback_NamingService_unbind_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NamingService_unbind_Base> Callback_NamingService_unbindPtr;

class Callback_NamingService_resolveByName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NamingService_resolveByName_Base> Callback_NamingService_resolveByNamePtr;

class Callback_NamingService_resolveByInterface_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NamingService_resolveByInterface_Base> Callback_NamingService_resolveByInterfacePtr;

}

namespace IceProxy
{

namespace jderobot
{

class NamingNode : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<NamingNode> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_secure(bool __secure) const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_twoway() const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_oneway() const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_batchOneway() const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_datagram() const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_batchDatagram() const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_compress(bool __compress) const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_timeout(int __timeout) const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NamingNode> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<NamingNode*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class NodeContainer : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_secure(bool __secure) const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_twoway() const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_oneway() const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_batchOneway() const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_datagram() const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_batchDatagram() const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_compress(bool __compress) const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_timeout(int __timeout) const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NodeContainer> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<NodeContainer*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class NamingService : virtual public ::IceProxy::Ice::Object
{
public:

    void bind(const ::jderobot::NamingNodePtr& node)
    {
        bind(node, 0);
    }
    void bind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& __ctx)
    {
        bind(node, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_bind(const ::jderobot::NamingNodePtr& node, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_bind(node, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_bind(const ::jderobot::NamingNodePtr& node, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_bind(node, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_bind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_bind(node, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_bind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_bind(node, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_bind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::jderobot::NamingServicePrx __proxy = ::jderobot::NamingServicePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_bind(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_bind(node, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_bind(const ::jderobot::NamingNodePtr& node)
    {
        return begin_bind(node, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_bind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& __ctx)
    {
        return begin_bind(node, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_bind(const ::jderobot::NamingNodePtr& node, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_bind(node, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_bind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_bind(node, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_bind(const ::jderobot::NamingNodePtr& node, const ::jderobot::Callback_NamingService_bindPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_bind(node, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_bind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& __ctx, const ::jderobot::Callback_NamingService_bindPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_bind(node, &__ctx, __del, __cookie);
    }

    void end_bind(const ::Ice::AsyncResultPtr&);
    
private:

    void bind(const ::jderobot::NamingNodePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_bind(const ::jderobot::NamingNodePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void unbind(const ::jderobot::NamingNodePtr& node)
    {
        unbind(node, 0);
    }
    void unbind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& __ctx)
    {
        unbind(node, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_unbind(const ::jderobot::NamingNodePtr& node, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unbind(node, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unbind(const ::jderobot::NamingNodePtr& node, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unbind(node, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_unbind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_unbind(node, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_unbind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_unbind(node, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_unbind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::jderobot::NamingServicePrx __proxy = ::jderobot::NamingServicePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_unbind(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_unbind(node, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_unbind(const ::jderobot::NamingNodePtr& node)
    {
        return begin_unbind(node, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unbind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& __ctx)
    {
        return begin_unbind(node, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unbind(const ::jderobot::NamingNodePtr& node, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unbind(node, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unbind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unbind(node, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unbind(const ::jderobot::NamingNodePtr& node, const ::jderobot::Callback_NamingService_unbindPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unbind(node, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_unbind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& __ctx, const ::jderobot::Callback_NamingService_unbindPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_unbind(node, &__ctx, __del, __cookie);
    }

    void end_unbind(const ::Ice::AsyncResultPtr&);
    
private:

    void unbind(const ::jderobot::NamingNodePtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_unbind(const ::jderobot::NamingNodePtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::jderobot::NodeContainerPtr resolveByName(const ::std::string& name)
    {
        return resolveByName(name, 0);
    }
    ::jderobot::NodeContainerPtr resolveByName(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return resolveByName(name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_resolveByName(const ::std::string& name, const ::IceInternal::Function<void (const ::jderobot::NodeContainerPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_resolveByName(name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_resolveByName(const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resolveByName(name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_resolveByName(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::jderobot::NodeContainerPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_resolveByName(name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_resolveByName(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resolveByName(name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_resolveByName(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::NodeContainerPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::jderobot::NodeContainerPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::jderobot::NamingServicePrx __proxy = ::jderobot::NamingServicePrx::uncheckedCast(__result->getProxy());
                ::jderobot::NodeContainerPtr __ret;
                try
                {
                    __ret = __proxy->end_resolveByName(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::jderobot::NodeContainerPtr&)> _response;
        };
        return begin_resolveByName(name, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_resolveByName(const ::std::string& name)
    {
        return begin_resolveByName(name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resolveByName(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_resolveByName(name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resolveByName(const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resolveByName(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resolveByName(const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resolveByName(name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resolveByName(const ::std::string& name, const ::jderobot::Callback_NamingService_resolveByNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resolveByName(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resolveByName(const ::std::string& name, const ::Ice::Context& __ctx, const ::jderobot::Callback_NamingService_resolveByNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resolveByName(name, &__ctx, __del, __cookie);
    }

    ::jderobot::NodeContainerPtr end_resolveByName(const ::Ice::AsyncResultPtr&);
    
private:

    ::jderobot::NodeContainerPtr resolveByName(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_resolveByName(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::jderobot::NodeContainerPtr resolveByInterface(const ::std::string& interfaceName)
    {
        return resolveByInterface(interfaceName, 0);
    }
    ::jderobot::NodeContainerPtr resolveByInterface(const ::std::string& interfaceName, const ::Ice::Context& __ctx)
    {
        return resolveByInterface(interfaceName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_resolveByInterface(const ::std::string& interfaceName, const ::IceInternal::Function<void (const ::jderobot::NodeContainerPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_resolveByInterface(interfaceName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_resolveByInterface(const ::std::string& interfaceName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resolveByInterface(interfaceName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_resolveByInterface(const ::std::string& interfaceName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::jderobot::NodeContainerPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_resolveByInterface(interfaceName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_resolveByInterface(const ::std::string& interfaceName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resolveByInterface(interfaceName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_resolveByInterface(const ::std::string& interfaceName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::NodeContainerPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::jderobot::NodeContainerPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::jderobot::NamingServicePrx __proxy = ::jderobot::NamingServicePrx::uncheckedCast(__result->getProxy());
                ::jderobot::NodeContainerPtr __ret;
                try
                {
                    __ret = __proxy->end_resolveByInterface(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::jderobot::NodeContainerPtr&)> _response;
        };
        return begin_resolveByInterface(interfaceName, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_resolveByInterface(const ::std::string& interfaceName)
    {
        return begin_resolveByInterface(interfaceName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resolveByInterface(const ::std::string& interfaceName, const ::Ice::Context& __ctx)
    {
        return begin_resolveByInterface(interfaceName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resolveByInterface(const ::std::string& interfaceName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resolveByInterface(interfaceName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resolveByInterface(const ::std::string& interfaceName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resolveByInterface(interfaceName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resolveByInterface(const ::std::string& interfaceName, const ::jderobot::Callback_NamingService_resolveByInterfacePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resolveByInterface(interfaceName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resolveByInterface(const ::std::string& interfaceName, const ::Ice::Context& __ctx, const ::jderobot::Callback_NamingService_resolveByInterfacePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resolveByInterface(interfaceName, &__ctx, __del, __cookie);
    }

    ::jderobot::NodeContainerPtr end_resolveByInterface(const ::Ice::AsyncResultPtr&);
    
private:

    ::jderobot::NodeContainerPtr resolveByInterface(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_resolveByInterface(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<NamingService> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_secure(bool __secure) const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_twoway() const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_oneway() const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_batchOneway() const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_datagram() const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_batchDatagram() const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_compress(bool __compress) const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_timeout(int __timeout) const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NamingService> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<NamingService*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace jderobot
{

class NamingNode : virtual public ::IceDelegate::Ice::Object
{
public:
};

class NodeContainer : virtual public ::IceDelegate::Ice::Object
{
public:
};

class NamingService : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void bind(const ::jderobot::NamingNodePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void unbind(const ::jderobot::NamingNodePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::jderobot::NodeContainerPtr resolveByName(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::jderobot::NodeContainerPtr resolveByInterface(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace jderobot
{

class NamingNode : virtual public ::IceDelegate::jderobot::NamingNode,
                   virtual public ::IceDelegateM::Ice::Object
{
public:
};

class NodeContainer : virtual public ::IceDelegate::jderobot::NodeContainer,
                      virtual public ::IceDelegateM::Ice::Object
{
public:
};

class NamingService : virtual public ::IceDelegate::jderobot::NamingService,
                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void bind(const ::jderobot::NamingNodePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unbind(const ::jderobot::NamingNodePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::jderobot::NodeContainerPtr resolveByName(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::jderobot::NodeContainerPtr resolveByInterface(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace jderobot
{

class NamingNode : virtual public ::IceDelegate::jderobot::NamingNode,
                   virtual public ::IceDelegateD::Ice::Object
{
public:
};

class NodeContainer : virtual public ::IceDelegate::jderobot::NodeContainer,
                      virtual public ::IceDelegateD::Ice::Object
{
public:
};

class NamingService : virtual public ::IceDelegate::jderobot::NamingService,
                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void bind(const ::jderobot::NamingNodePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void unbind(const ::jderobot::NamingNodePtr&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::jderobot::NodeContainerPtr resolveByName(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::jderobot::NodeContainerPtr resolveByInterface(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace jderobot
{

class NamingNode : virtual public ::Ice::Object
{
public:

    typedef NamingNodePrx ProxyType;
    typedef NamingNodePtr PointerType;

    NamingNode()
    {
    }

    NamingNode(const ::std::string& __ice_name, const ::std::string& __ice_interfaceName, const ::std::string& __ice_protocol, const ::std::string& __ice_ip, ::Ice::Int __ice_port) :
        name(__ice_name),
        interfaceName(__ice_interfaceName),
        protocol(__ice_protocol),
        ip(__ice_ip),
        port(__ice_port)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::std::string name;

    ::std::string interfaceName;

    ::std::string protocol;

    ::std::string ip;

    ::Ice::Int port;

protected:

    virtual ~NamingNode() {}

    friend class NamingNode__staticInit;
};

class NamingNode__staticInit
{
public:

    ::jderobot::NamingNode _init;
};

static NamingNode__staticInit _NamingNode_init;

inline bool operator==(const NamingNode& l, const NamingNode& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const NamingNode& l, const NamingNode& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class NodeContainer : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef NodeContainerPrx ProxyType;
    typedef NodeContainerPtr PointerType;

    NodeContainer()
    {
    }

    explicit NodeContainer(const ::jderobot::nodeList& __ice_nodes) :
        nodes(__ice_nodes)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::jderobot::nodeList nodes;

protected:

    virtual ~NodeContainer() {}
};

inline bool operator==(const NodeContainer& l, const NodeContainer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const NodeContainer& l, const NodeContainer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class NamingService : virtual public ::Ice::Object
{
public:

    typedef NamingServicePrx ProxyType;
    typedef NamingServicePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void bind(const ::jderobot::NamingNodePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___bind(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void unbind(const ::jderobot::NamingNodePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___unbind(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::jderobot::NodeContainerPtr resolveByName(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___resolveByName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::jderobot::NodeContainerPtr resolveByInterface(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___resolveByInterface(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const NamingService& l, const NamingService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const NamingService& l, const NamingService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace jderobot
{

template<class T>
class CallbackNC_NamingService_bind : public Callback_NamingService_bind_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NamingService_bind(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::NamingServicePrx __proxy = ::jderobot::NamingServicePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_bind(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_NamingService_bindPtr
newCallback_NamingService_bind(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_bind<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NamingService_bindPtr
newCallback_NamingService_bind(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_bind<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NamingService_bindPtr
newCallback_NamingService_bind(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_bind<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NamingService_bindPtr
newCallback_NamingService_bind(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_bind<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NamingService_bind : public Callback_NamingService_bind_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NamingService_bind(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::NamingServicePrx __proxy = ::jderobot::NamingServicePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_bind(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_NamingService_bindPtr
newCallback_NamingService_bind(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_bind<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NamingService_bindPtr
newCallback_NamingService_bind(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_bind<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NamingService_bindPtr
newCallback_NamingService_bind(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_bind<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NamingService_bindPtr
newCallback_NamingService_bind(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_bind<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NamingService_unbind : public Callback_NamingService_unbind_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NamingService_unbind(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::NamingServicePrx __proxy = ::jderobot::NamingServicePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unbind(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_NamingService_unbindPtr
newCallback_NamingService_unbind(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_unbind<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NamingService_unbindPtr
newCallback_NamingService_unbind(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_unbind<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NamingService_unbindPtr
newCallback_NamingService_unbind(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_unbind<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NamingService_unbindPtr
newCallback_NamingService_unbind(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_unbind<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NamingService_unbind : public Callback_NamingService_unbind_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NamingService_unbind(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::NamingServicePrx __proxy = ::jderobot::NamingServicePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_unbind(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_NamingService_unbindPtr
newCallback_NamingService_unbind(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_unbind<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NamingService_unbindPtr
newCallback_NamingService_unbind(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_unbind<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NamingService_unbindPtr
newCallback_NamingService_unbind(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_unbind<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NamingService_unbindPtr
newCallback_NamingService_unbind(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_unbind<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NamingService_resolveByName : public Callback_NamingService_resolveByName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::jderobot::NodeContainerPtr&);

    CallbackNC_NamingService_resolveByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::NamingServicePrx __proxy = ::jderobot::NamingServicePrx::uncheckedCast(__result->getProxy());
        ::jderobot::NodeContainerPtr __ret;
        try
        {
            __ret = __proxy->end_resolveByName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_NamingService_resolveByNamePtr
newCallback_NamingService_resolveByName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::NodeContainerPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_resolveByName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NamingService_resolveByNamePtr
newCallback_NamingService_resolveByName(T* instance, void (T::*cb)(const ::jderobot::NodeContainerPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_resolveByName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_NamingService_resolveByName : public Callback_NamingService_resolveByName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::jderobot::NodeContainerPtr&, const CT&);

    Callback_NamingService_resolveByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::NamingServicePrx __proxy = ::jderobot::NamingServicePrx::uncheckedCast(__result->getProxy());
        ::jderobot::NodeContainerPtr __ret;
        try
        {
            __ret = __proxy->end_resolveByName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_NamingService_resolveByNamePtr
newCallback_NamingService_resolveByName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::NodeContainerPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_resolveByName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NamingService_resolveByNamePtr
newCallback_NamingService_resolveByName(T* instance, void (T::*cb)(const ::jderobot::NodeContainerPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_resolveByName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_NamingService_resolveByInterface : public Callback_NamingService_resolveByInterface_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::jderobot::NodeContainerPtr&);

    CallbackNC_NamingService_resolveByInterface(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::NamingServicePrx __proxy = ::jderobot::NamingServicePrx::uncheckedCast(__result->getProxy());
        ::jderobot::NodeContainerPtr __ret;
        try
        {
            __ret = __proxy->end_resolveByInterface(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_NamingService_resolveByInterfacePtr
newCallback_NamingService_resolveByInterface(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::NodeContainerPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_resolveByInterface<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NamingService_resolveByInterfacePtr
newCallback_NamingService_resolveByInterface(T* instance, void (T::*cb)(const ::jderobot::NodeContainerPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_resolveByInterface<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_NamingService_resolveByInterface : public Callback_NamingService_resolveByInterface_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::jderobot::NodeContainerPtr&, const CT&);

    Callback_NamingService_resolveByInterface(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::NamingServicePrx __proxy = ::jderobot::NamingServicePrx::uncheckedCast(__result->getProxy());
        ::jderobot::NodeContainerPtr __ret;
        try
        {
            __ret = __proxy->end_resolveByInterface(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_NamingService_resolveByInterfacePtr
newCallback_NamingService_resolveByInterface(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::NodeContainerPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_resolveByInterface<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NamingService_resolveByInterfacePtr
newCallback_NamingService_resolveByInterface(T* instance, void (T::*cb)(const ::jderobot::NodeContainerPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_resolveByInterface<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
