// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `navdata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package jderobot;

public class NavdataData extends Ice.ObjectImpl
{
    public NavdataData()
    {
    }

    public NavdataData(int vehicle, int state, float batteryPercent, int magX, int magY, int magZ, int pressure, int temp, float windSpeed, float windAngle, float windCompAngle, float rotX, float rotY, float rotZ, int altd, float vx, float vy, float vz, float ax, float ay, float az, int tagsCount, int[] tagsType, int[] tagsXc, int[] tagsYc, int[] tagsWidth, int[] tagsHeight, float[] tagsOrientation, float[] tagsDistance, float tm)
    {
        this.vehicle = vehicle;
        this.state = state;
        this.batteryPercent = batteryPercent;
        this.magX = magX;
        this.magY = magY;
        this.magZ = magZ;
        this.pressure = pressure;
        this.temp = temp;
        this.windSpeed = windSpeed;
        this.windAngle = windAngle;
        this.windCompAngle = windCompAngle;
        this.rotX = rotX;
        this.rotY = rotY;
        this.rotZ = rotZ;
        this.altd = altd;
        this.vx = vx;
        this.vy = vy;
        this.vz = vz;
        this.ax = ax;
        this.ay = ay;
        this.az = az;
        this.tagsCount = tagsCount;
        this.tagsType = tagsType;
        this.tagsXc = tagsXc;
        this.tagsYc = tagsYc;
        this.tagsWidth = tagsWidth;
        this.tagsHeight = tagsHeight;
        this.tagsOrientation = tagsOrientation;
        this.tagsDistance = tagsDistance;
        this.tm = tm;
    }

    private static class __F implements Ice.ObjectFactory
    {
        public Ice.Object create(String type)
        {
            assert(type.equals(ice_staticId()));
            return new NavdataData();
        }

        public void destroy()
        {
        }
    }
    private static Ice.ObjectFactory _factory = new __F();

    public static Ice.ObjectFactory
    ice_factory()
    {
        return _factory;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::jderobot::NavdataData"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.writeInt(vehicle);
        __os.writeInt(state);
        __os.writeFloat(batteryPercent);
        __os.writeInt(magX);
        __os.writeInt(magY);
        __os.writeInt(magZ);
        __os.writeInt(pressure);
        __os.writeInt(temp);
        __os.writeFloat(windSpeed);
        __os.writeFloat(windAngle);
        __os.writeFloat(windCompAngle);
        __os.writeFloat(rotX);
        __os.writeFloat(rotY);
        __os.writeFloat(rotZ);
        __os.writeInt(altd);
        __os.writeFloat(vx);
        __os.writeFloat(vy);
        __os.writeFloat(vz);
        __os.writeFloat(ax);
        __os.writeFloat(ay);
        __os.writeFloat(az);
        __os.writeInt(tagsCount);
        arrayIntHelper.write(__os, tagsType);
        arrayIntHelper.write(__os, tagsXc);
        arrayIntHelper.write(__os, tagsYc);
        arrayIntHelper.write(__os, tagsWidth);
        arrayIntHelper.write(__os, tagsHeight);
        arrayFloatHelper.write(__os, tagsOrientation);
        arrayFloatHelper.write(__os, tagsDistance);
        __os.writeFloat(tm);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        vehicle = __is.readInt();
        state = __is.readInt();
        batteryPercent = __is.readFloat();
        magX = __is.readInt();
        magY = __is.readInt();
        magZ = __is.readInt();
        pressure = __is.readInt();
        temp = __is.readInt();
        windSpeed = __is.readFloat();
        windAngle = __is.readFloat();
        windCompAngle = __is.readFloat();
        rotX = __is.readFloat();
        rotY = __is.readFloat();
        rotZ = __is.readFloat();
        altd = __is.readInt();
        vx = __is.readFloat();
        vy = __is.readFloat();
        vz = __is.readFloat();
        ax = __is.readFloat();
        ay = __is.readFloat();
        az = __is.readFloat();
        tagsCount = __is.readInt();
        tagsType = arrayIntHelper.read(__is);
        tagsXc = arrayIntHelper.read(__is);
        tagsYc = arrayIntHelper.read(__is);
        tagsWidth = arrayIntHelper.read(__is);
        tagsHeight = arrayIntHelper.read(__is);
        tagsOrientation = arrayFloatHelper.read(__is);
        tagsDistance = arrayFloatHelper.read(__is);
        tm = __is.readFloat();
        __is.endReadSlice();
    }

    public int vehicle;

    public int state;

    public float batteryPercent;

    public int magX;

    public int magY;

    public int magZ;

    public int pressure;

    public int temp;

    public float windSpeed;

    public float windAngle;

    public float windCompAngle;

    public float rotX;

    public float rotY;

    public float rotZ;

    public int altd;

    public float vx;

    public float vy;

    public float vz;

    public float ax;

    public float ay;

    public float az;

    public int tagsCount;

    public int[] tagsType;

    public int[] tagsXc;

    public int[] tagsYc;

    public int[] tagsWidth;

    public int[] tagsHeight;

    public float[] tagsOrientation;

    public float[] tagsDistance;

    public float tm;

    public static final long serialVersionUID = 5858895685913180050L;
}
