// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `visualization.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package jderobot;

public class Color implements java.lang.Cloneable, java.io.Serializable
{
    public float r;

    public float g;

    public float b;

    public Color()
    {
    }

    public Color(float r, float g, float b)
    {
        this.r = r;
        this.g = g;
        this.b = b;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Color _r = null;
        if(rhs instanceof Color)
        {
            _r = (Color)rhs;
        }

        if(_r != null)
        {
            if(r != _r.r)
            {
                return false;
            }
            if(g != _r.g)
            {
                return false;
            }
            if(b != _r.b)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::jderobot::Color");
        __h = IceInternal.HashUtil.hashAdd(__h, r);
        __h = IceInternal.HashUtil.hashAdd(__h, g);
        __h = IceInternal.HashUtil.hashAdd(__h, b);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeFloat(r);
        __os.writeFloat(g);
        __os.writeFloat(b);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        r = __is.readFloat();
        g = __is.readFloat();
        b = __is.readFloat();
    }

    public static final long serialVersionUID = 5068745018783545481L;
}
