// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `primitives.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package jderobot;

public class Segment implements java.lang.Cloneable, java.io.Serializable
{
    public Point fromPoint;

    public Point toPoint;

    public Segment()
    {
    }

    public Segment(Point fromPoint, Point toPoint)
    {
        this.fromPoint = fromPoint;
        this.toPoint = toPoint;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Segment _r = null;
        if(rhs instanceof Segment)
        {
            _r = (Segment)rhs;
        }

        if(_r != null)
        {
            if(fromPoint != _r.fromPoint)
            {
                if(fromPoint == null || _r.fromPoint == null || !fromPoint.equals(_r.fromPoint))
                {
                    return false;
                }
            }
            if(toPoint != _r.toPoint)
            {
                if(toPoint == null || _r.toPoint == null || !toPoint.equals(_r.toPoint))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::jderobot::Segment");
        __h = IceInternal.HashUtil.hashAdd(__h, fromPoint);
        __h = IceInternal.HashUtil.hashAdd(__h, toPoint);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        fromPoint.__write(__os);
        toPoint.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        fromPoint = new Point();
        fromPoint.__read(__is);
        toPoint = new Point();
        toPoint.__read(__is);
    }

    public static final long serialVersionUID = -6697690702254202902L;
}
