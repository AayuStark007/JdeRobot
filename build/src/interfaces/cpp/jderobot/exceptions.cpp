// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `exceptions.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <jderobot/exceptions.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <Ice/LocalException.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const char* __jderobot__JderobotException_name = "jderobot::JderobotException";

struct __F__jderobot__JderobotException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::jderobot::JderobotException();
    }
};

class __F__jderobot__JderobotException__Init
{
public:

    __F__jderobot__JderobotException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::jderobot::JderobotException", new __F__jderobot__JderobotException);
    }

    ~__F__jderobot__JderobotException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::jderobot::JderobotException");
    }
};

const __F__jderobot__JderobotException__Init __F__jderobot__JderobotException__i;

}

jderobot::JderobotException::JderobotException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

jderobot::JderobotException::~JderobotException() throw()
{
}

::std::string
jderobot::JderobotException::ice_name() const
{
    return __jderobot__JderobotException_name;
}

jderobot::JderobotException*
jderobot::JderobotException::ice_clone() const
{
    return new JderobotException(*this);
}

void
jderobot::JderobotException::ice_throw() const
{
    throw *this;
}

void
jderobot::JderobotException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::jderobot::JderobotException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
jderobot::JderobotException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace
{

const char* __jderobot__ConfigurationNotExistException_name = "jderobot::ConfigurationNotExistException";

struct __F__jderobot__ConfigurationNotExistException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::jderobot::ConfigurationNotExistException();
    }
};

class __F__jderobot__ConfigurationNotExistException__Init
{
public:

    __F__jderobot__ConfigurationNotExistException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::jderobot::ConfigurationNotExistException", new __F__jderobot__ConfigurationNotExistException);
    }

    ~__F__jderobot__ConfigurationNotExistException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::jderobot::ConfigurationNotExistException");
    }
};

const __F__jderobot__ConfigurationNotExistException__Init __F__jderobot__ConfigurationNotExistException__i;

}

jderobot::ConfigurationNotExistException::ConfigurationNotExistException(const ::std::string& __ice_what) :
    ::jderobot::JderobotException(__ice_what)
{
}

jderobot::ConfigurationNotExistException::~ConfigurationNotExistException() throw()
{
}

::std::string
jderobot::ConfigurationNotExistException::ice_name() const
{
    return __jderobot__ConfigurationNotExistException_name;
}

jderobot::ConfigurationNotExistException*
jderobot::ConfigurationNotExistException::ice_clone() const
{
    return new ConfigurationNotExistException(*this);
}

void
jderobot::ConfigurationNotExistException::ice_throw() const
{
    throw *this;
}

void
jderobot::ConfigurationNotExistException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::jderobot::ConfigurationNotExistException", -1, false);
    __os->endWriteSlice();
    ::jderobot::JderobotException::__writeImpl(__os);
}

void
jderobot::ConfigurationNotExistException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::jderobot::JderobotException::__readImpl(__is);
}

namespace
{

const char* __jderobot__DataNotExistException_name = "jderobot::DataNotExistException";

struct __F__jderobot__DataNotExistException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::jderobot::DataNotExistException();
    }
};

class __F__jderobot__DataNotExistException__Init
{
public:

    __F__jderobot__DataNotExistException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::jderobot::DataNotExistException", new __F__jderobot__DataNotExistException);
    }

    ~__F__jderobot__DataNotExistException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::jderobot::DataNotExistException");
    }
};

const __F__jderobot__DataNotExistException__Init __F__jderobot__DataNotExistException__i;

}

jderobot::DataNotExistException::DataNotExistException(const ::std::string& __ice_what) :
    ::jderobot::JderobotException(__ice_what)
{
}

jderobot::DataNotExistException::~DataNotExistException() throw()
{
}

::std::string
jderobot::DataNotExistException::ice_name() const
{
    return __jderobot__DataNotExistException_name;
}

jderobot::DataNotExistException*
jderobot::DataNotExistException::ice_clone() const
{
    return new DataNotExistException(*this);
}

void
jderobot::DataNotExistException::ice_throw() const
{
    throw *this;
}

void
jderobot::DataNotExistException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::jderobot::DataNotExistException", -1, false);
    __os->endWriteSlice();
    ::jderobot::JderobotException::__writeImpl(__os);
}

void
jderobot::DataNotExistException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::jderobot::JderobotException::__readImpl(__is);
}

namespace
{

const char* __jderobot__HardwareFailedException_name = "jderobot::HardwareFailedException";

struct __F__jderobot__HardwareFailedException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::jderobot::HardwareFailedException();
    }
};

class __F__jderobot__HardwareFailedException__Init
{
public:

    __F__jderobot__HardwareFailedException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::jderobot::HardwareFailedException", new __F__jderobot__HardwareFailedException);
    }

    ~__F__jderobot__HardwareFailedException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::jderobot::HardwareFailedException");
    }
};

const __F__jderobot__HardwareFailedException__Init __F__jderobot__HardwareFailedException__i;

}

jderobot::HardwareFailedException::HardwareFailedException(const ::std::string& __ice_what) :
    ::jderobot::JderobotException(__ice_what)
{
}

jderobot::HardwareFailedException::~HardwareFailedException() throw()
{
}

::std::string
jderobot::HardwareFailedException::ice_name() const
{
    return __jderobot__HardwareFailedException_name;
}

jderobot::HardwareFailedException*
jderobot::HardwareFailedException::ice_clone() const
{
    return new HardwareFailedException(*this);
}

void
jderobot::HardwareFailedException::ice_throw() const
{
    throw *this;
}

void
jderobot::HardwareFailedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::jderobot::HardwareFailedException", -1, false);
    __os->endWriteSlice();
    ::jderobot::JderobotException::__writeImpl(__os);
}

void
jderobot::HardwareFailedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::jderobot::JderobotException::__readImpl(__is);
}

namespace
{

const char* __jderobot__NoTopicException_name = "jderobot::NoTopicException";

struct __F__jderobot__NoTopicException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::jderobot::NoTopicException();
    }
};

class __F__jderobot__NoTopicException__Init
{
public:

    __F__jderobot__NoTopicException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::jderobot::NoTopicException", new __F__jderobot__NoTopicException);
    }

    ~__F__jderobot__NoTopicException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::jderobot::NoTopicException");
    }
};

const __F__jderobot__NoTopicException__Init __F__jderobot__NoTopicException__i;

}

jderobot::NoTopicException::NoTopicException(const ::std::string& __ice_what) :
    ::jderobot::JderobotException(__ice_what)
{
}

jderobot::NoTopicException::~NoTopicException() throw()
{
}

::std::string
jderobot::NoTopicException::ice_name() const
{
    return __jderobot__NoTopicException_name;
}

jderobot::NoTopicException*
jderobot::NoTopicException::ice_clone() const
{
    return new NoTopicException(*this);
}

void
jderobot::NoTopicException::ice_throw() const
{
    throw *this;
}

void
jderobot::NoTopicException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::jderobot::NoTopicException", -1, false);
    __os->endWriteSlice();
    ::jderobot::JderobotException::__writeImpl(__os);
}

void
jderobot::NoTopicException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::jderobot::JderobotException::__readImpl(__is);
}

namespace
{

const char* __jderobot__SubscriptionFailedException_name = "jderobot::SubscriptionFailedException";

struct __F__jderobot__SubscriptionFailedException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::jderobot::SubscriptionFailedException();
    }
};

class __F__jderobot__SubscriptionFailedException__Init
{
public:

    __F__jderobot__SubscriptionFailedException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::jderobot::SubscriptionFailedException", new __F__jderobot__SubscriptionFailedException);
    }

    ~__F__jderobot__SubscriptionFailedException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::jderobot::SubscriptionFailedException");
    }
};

const __F__jderobot__SubscriptionFailedException__Init __F__jderobot__SubscriptionFailedException__i;

}

jderobot::SubscriptionFailedException::SubscriptionFailedException(const ::std::string& __ice_what) :
    ::jderobot::JderobotException(__ice_what)
{
}

jderobot::SubscriptionFailedException::~SubscriptionFailedException() throw()
{
}

::std::string
jderobot::SubscriptionFailedException::ice_name() const
{
    return __jderobot__SubscriptionFailedException_name;
}

jderobot::SubscriptionFailedException*
jderobot::SubscriptionFailedException::ice_clone() const
{
    return new SubscriptionFailedException(*this);
}

void
jderobot::SubscriptionFailedException::ice_throw() const
{
    throw *this;
}

void
jderobot::SubscriptionFailedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::jderobot::SubscriptionFailedException", -1, false);
    __os->endWriteSlice();
    ::jderobot::JderobotException::__writeImpl(__os);
}

void
jderobot::SubscriptionFailedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::jderobot::JderobotException::__readImpl(__is);
}

namespace
{

const char* __jderobot__SubscriptionPushFailedException_name = "jderobot::SubscriptionPushFailedException";

struct __F__jderobot__SubscriptionPushFailedException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::jderobot::SubscriptionPushFailedException();
    }
};

class __F__jderobot__SubscriptionPushFailedException__Init
{
public:

    __F__jderobot__SubscriptionPushFailedException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::jderobot::SubscriptionPushFailedException", new __F__jderobot__SubscriptionPushFailedException);
    }

    ~__F__jderobot__SubscriptionPushFailedException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::jderobot::SubscriptionPushFailedException");
    }
};

const __F__jderobot__SubscriptionPushFailedException__Init __F__jderobot__SubscriptionPushFailedException__i;

}

jderobot::SubscriptionPushFailedException::SubscriptionPushFailedException(const ::std::string& __ice_what) :
    ::jderobot::JderobotException(__ice_what)
{
}

jderobot::SubscriptionPushFailedException::~SubscriptionPushFailedException() throw()
{
}

::std::string
jderobot::SubscriptionPushFailedException::ice_name() const
{
    return __jderobot__SubscriptionPushFailedException_name;
}

jderobot::SubscriptionPushFailedException*
jderobot::SubscriptionPushFailedException::ice_clone() const
{
    return new SubscriptionPushFailedException(*this);
}

void
jderobot::SubscriptionPushFailedException::ice_throw() const
{
    throw *this;
}

void
jderobot::SubscriptionPushFailedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::jderobot::SubscriptionPushFailedException", -1, false);
    __os->endWriteSlice();
    ::jderobot::JderobotException::__writeImpl(__os);
}

void
jderobot::SubscriptionPushFailedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::jderobot::JderobotException::__readImpl(__is);
}

namespace Ice
{
}
