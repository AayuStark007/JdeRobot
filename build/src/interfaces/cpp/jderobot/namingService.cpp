// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `namingService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <jderobot/namingService.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __jderobot__NamingService__bind_name = "bind";

const ::std::string __jderobot__NamingService__unbind_name = "unbind";

const ::std::string __jderobot__NamingService__resolveByName_name = "resolveByName";

const ::std::string __jderobot__NamingService__resolveByInterface_name = "resolveByInterface";

}

namespace
{

const char* __jderobot__NameAlreadyExistException_name = "jderobot::NameAlreadyExistException";

struct __F__jderobot__NameAlreadyExistException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::jderobot::NameAlreadyExistException();
    }
};

class __F__jderobot__NameAlreadyExistException__Init
{
public:

    __F__jderobot__NameAlreadyExistException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::jderobot::NameAlreadyExistException", new __F__jderobot__NameAlreadyExistException);
    }

    ~__F__jderobot__NameAlreadyExistException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::jderobot::NameAlreadyExistException");
    }
};

const __F__jderobot__NameAlreadyExistException__Init __F__jderobot__NameAlreadyExistException__i;

}

jderobot::NameAlreadyExistException::NameAlreadyExistException(const ::std::string& __ice_what) :
    ::jderobot::JderobotException(__ice_what)
{
}

jderobot::NameAlreadyExistException::~NameAlreadyExistException() throw()
{
}

::std::string
jderobot::NameAlreadyExistException::ice_name() const
{
    return __jderobot__NameAlreadyExistException_name;
}

jderobot::NameAlreadyExistException*
jderobot::NameAlreadyExistException::ice_clone() const
{
    return new NameAlreadyExistException(*this);
}

void
jderobot::NameAlreadyExistException::ice_throw() const
{
    throw *this;
}

void
jderobot::NameAlreadyExistException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::jderobot::NameAlreadyExistException", -1, false);
    __os->endWriteSlice();
    ::jderobot::JderobotException::__writeImpl(__os);
}

void
jderobot::NameAlreadyExistException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::jderobot::JderobotException::__readImpl(__is);
}

namespace
{

const char* __jderobot__NameNotExistException_name = "jderobot::NameNotExistException";

struct __F__jderobot__NameNotExistException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::jderobot::NameNotExistException();
    }
};

class __F__jderobot__NameNotExistException__Init
{
public:

    __F__jderobot__NameNotExistException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::jderobot::NameNotExistException", new __F__jderobot__NameNotExistException);
    }

    ~__F__jderobot__NameNotExistException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::jderobot::NameNotExistException");
    }
};

const __F__jderobot__NameNotExistException__Init __F__jderobot__NameNotExistException__i;

}

jderobot::NameNotExistException::NameNotExistException(const ::std::string& __ice_what) :
    ::jderobot::JderobotException(__ice_what)
{
}

jderobot::NameNotExistException::~NameNotExistException() throw()
{
}

::std::string
jderobot::NameNotExistException::ice_name() const
{
    return __jderobot__NameNotExistException_name;
}

jderobot::NameNotExistException*
jderobot::NameNotExistException::ice_clone() const
{
    return new NameNotExistException(*this);
}

void
jderobot::NameNotExistException::ice_throw() const
{
    throw *this;
}

void
jderobot::NameNotExistException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::jderobot::NameNotExistException", -1, false);
    __os->endWriteSlice();
    ::jderobot::JderobotException::__writeImpl(__os);
}

void
jderobot::NameNotExistException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::jderobot::JderobotException::__readImpl(__is);
}

namespace
{

const char* __jderobot__InterfaceNotExistException_name = "jderobot::InterfaceNotExistException";

struct __F__jderobot__InterfaceNotExistException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::jderobot::InterfaceNotExistException();
    }
};

class __F__jderobot__InterfaceNotExistException__Init
{
public:

    __F__jderobot__InterfaceNotExistException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::jderobot::InterfaceNotExistException", new __F__jderobot__InterfaceNotExistException);
    }

    ~__F__jderobot__InterfaceNotExistException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::jderobot::InterfaceNotExistException");
    }
};

const __F__jderobot__InterfaceNotExistException__Init __F__jderobot__InterfaceNotExistException__i;

}

jderobot::InterfaceNotExistException::InterfaceNotExistException(const ::std::string& __ice_what) :
    ::jderobot::JderobotException(__ice_what)
{
}

jderobot::InterfaceNotExistException::~InterfaceNotExistException() throw()
{
}

::std::string
jderobot::InterfaceNotExistException::ice_name() const
{
    return __jderobot__InterfaceNotExistException_name;
}

jderobot::InterfaceNotExistException*
jderobot::InterfaceNotExistException::ice_clone() const
{
    return new InterfaceNotExistException(*this);
}

void
jderobot::InterfaceNotExistException::ice_throw() const
{
    throw *this;
}

void
jderobot::InterfaceNotExistException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::jderobot::InterfaceNotExistException", -1, false);
    __os->endWriteSlice();
    ::jderobot::JderobotException::__writeImpl(__os);
}

void
jderobot::InterfaceNotExistException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::jderobot::JderobotException::__readImpl(__is);
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::jderobot::upCast(::IceProxy::jderobot::NamingNode* p) { return p; }

void
::IceProxy::jderobot::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NamingNode>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::jderobot::NamingNode;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::jderobot::NamingNode::ice_staticId()
{
    return ::jderobot::NamingNode::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::jderobot::NamingNode::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::jderobot::NamingNode);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::jderobot::NamingNode::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::jderobot::NamingNode);
}

::IceProxy::Ice::Object*
IceProxy::jderobot::NamingNode::__newInstance() const
{
    return new NamingNode;
}
::IceProxy::Ice::Object* ::IceProxy::jderobot::upCast(::IceProxy::jderobot::NodeContainer* p) { return p; }

void
::IceProxy::jderobot::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NodeContainer>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::jderobot::NodeContainer;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::jderobot::NodeContainer::ice_staticId()
{
    return ::jderobot::NodeContainer::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::jderobot::NodeContainer::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::jderobot::NodeContainer);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::jderobot::NodeContainer::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::jderobot::NodeContainer);
}

::IceProxy::Ice::Object*
IceProxy::jderobot::NodeContainer::__newInstance() const
{
    return new NodeContainer;
}
::IceProxy::Ice::Object* ::IceProxy::jderobot::upCast(::IceProxy::jderobot::NamingService* p) { return p; }

void
::IceProxy::jderobot::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NamingService>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::jderobot::NamingService;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::jderobot::NamingService::bind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __jderobot__NamingService__bind_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__jderobot__NamingService__bind_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::jderobot::NamingService* __del = dynamic_cast< ::IceDelegate::jderobot::NamingService*>(__delBase.get());
            __del->bind(node, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::jderobot::NamingService::begin_bind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__jderobot__NamingService__bind_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__NamingService__bind_name, __del, __cookie);
    try
    {
        __result->__prepare(__jderobot__NamingService__bind_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(node);
        __os->writePendingObjects();
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::jderobot::NamingService::end_bind(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __jderobot__NamingService__bind_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::jderobot::NameAlreadyExistException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::jderobot::NamingService::unbind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __jderobot__NamingService__unbind_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__jderobot__NamingService__unbind_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::jderobot::NamingService* __del = dynamic_cast< ::IceDelegate::jderobot::NamingService*>(__delBase.get());
            __del->unbind(node, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::jderobot::NamingService::begin_unbind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__jderobot__NamingService__unbind_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__NamingService__unbind_name, __del, __cookie);
    try
    {
        __result->__prepare(__jderobot__NamingService__unbind_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(node);
        __os->writePendingObjects();
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::jderobot::NamingService::end_unbind(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __jderobot__NamingService__unbind_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::jderobot::NameAlreadyExistException&)
            {
                throw;
            }
            catch(const ::jderobot::NameNotExistException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::jderobot::NodeContainerPtr
IceProxy::jderobot::NamingService::resolveByName(const ::std::string& name, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __jderobot__NamingService__resolveByName_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__jderobot__NamingService__resolveByName_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::jderobot::NamingService* __del = dynamic_cast< ::IceDelegate::jderobot::NamingService*>(__delBase.get());
            return __del->resolveByName(name, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::jderobot::NamingService::begin_resolveByName(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__jderobot__NamingService__resolveByName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__NamingService__resolveByName_name, __del, __cookie);
    try
    {
        __result->__prepare(__jderobot__NamingService__resolveByName_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::jderobot::NodeContainerPtr
IceProxy::jderobot::NamingService::end_resolveByName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __jderobot__NamingService__resolveByName_name);
    ::jderobot::NodeContainerPtr __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::jderobot::NameNotExistException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::jderobot::NodeContainerPtr
IceProxy::jderobot::NamingService::resolveByInterface(const ::std::string& interfaceName, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __jderobot__NamingService__resolveByInterface_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__jderobot__NamingService__resolveByInterface_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::jderobot::NamingService* __del = dynamic_cast< ::IceDelegate::jderobot::NamingService*>(__delBase.get());
            return __del->resolveByInterface(interfaceName, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::jderobot::NamingService::begin_resolveByInterface(const ::std::string& interfaceName, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__jderobot__NamingService__resolveByInterface_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__NamingService__resolveByInterface_name, __del, __cookie);
    try
    {
        __result->__prepare(__jderobot__NamingService__resolveByInterface_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(interfaceName);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::jderobot::NodeContainerPtr
IceProxy::jderobot::NamingService::end_resolveByInterface(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __jderobot__NamingService__resolveByInterface_name);
    ::jderobot::NodeContainerPtr __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::jderobot::InterfaceNotExistException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::jderobot::NamingService::ice_staticId()
{
    return ::jderobot::NamingService::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::jderobot::NamingService::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::jderobot::NamingService);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::jderobot::NamingService::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::jderobot::NamingService);
}

::IceProxy::Ice::Object*
IceProxy::jderobot::NamingService::__newInstance() const
{
    return new NamingService;
}

void
IceDelegateM::jderobot::NamingService::bind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __jderobot__NamingService__bind_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(node);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::jderobot::NameAlreadyExistException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::jderobot::NamingService::unbind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __jderobot__NamingService__unbind_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(node);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::jderobot::NameAlreadyExistException&)
            {
                throw;
            }
            catch(const ::jderobot::NameNotExistException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::jderobot::NodeContainerPtr
IceDelegateM::jderobot::NamingService::resolveByName(const ::std::string& name, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __jderobot__NamingService__resolveByName_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::jderobot::NodeContainerPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::jderobot::NameNotExistException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::jderobot::NodeContainerPtr
IceDelegateM::jderobot::NamingService::resolveByInterface(const ::std::string& interfaceName, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __jderobot__NamingService__resolveByInterface_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(interfaceName);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::jderobot::NodeContainerPtr __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::jderobot::InterfaceNotExistException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __is->readPendingObjects();
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::jderobot::NamingService::bind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::jderobot::NamingNodePtr& __p_node, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_node(__p_node)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::jderobot::NamingService* servant = dynamic_cast< ::jderobot::NamingService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->bind(_m_node, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::jderobot::NamingNodePtr& _m_node;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __jderobot__NamingService__bind_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(node, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::jderobot::NameAlreadyExistException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::jderobot::NamingService::unbind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::jderobot::NamingNodePtr& __p_node, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_node(__p_node)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::jderobot::NamingService* servant = dynamic_cast< ::jderobot::NamingService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->unbind(_m_node, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::jderobot::NamingNodePtr& _m_node;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __jderobot__NamingService__unbind_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(node, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::jderobot::NameAlreadyExistException&)
    {
        throw;
    }
    catch(const ::jderobot::NameNotExistException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::jderobot::NodeContainerPtr
IceDelegateD::jderobot::NamingService::resolveByName(const ::std::string& name, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::jderobot::NodeContainerPtr& __result, const ::std::string& __p_name, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_name(__p_name)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::jderobot::NamingService* servant = dynamic_cast< ::jderobot::NamingService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->resolveByName(_m_name, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::jderobot::NodeContainerPtr& _result;
        const ::std::string& _m_name;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __jderobot__NamingService__resolveByName_name, ::Ice::Idempotent, __context);
    ::jderobot::NodeContainerPtr __result;
    try
    {
        _DirectI __direct(__result, name, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::jderobot::NameNotExistException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::jderobot::NodeContainerPtr
IceDelegateD::jderobot::NamingService::resolveByInterface(const ::std::string& interfaceName, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::jderobot::NodeContainerPtr& __result, const ::std::string& __p_interfaceName, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_interfaceName(__p_interfaceName)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::jderobot::NamingService* servant = dynamic_cast< ::jderobot::NamingService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->resolveByInterface(_m_interfaceName, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::jderobot::NodeContainerPtr& _result;
        const ::std::string& _m_interfaceName;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __jderobot__NamingService__resolveByInterface_name, ::Ice::Idempotent, __context);
    ::jderobot::NodeContainerPtr __result;
    try
    {
        _DirectI __direct(__result, interfaceName, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::jderobot::InterfaceNotExistException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* jderobot::upCast(::jderobot::NamingNode* p) { return p; }
::Ice::ObjectPtr
jderobot::NamingNode::ice_clone() const
{
    ::Ice::Object* __p = new NamingNode(*this);
    return __p;
}

namespace
{
const ::std::string __jderobot__NamingNode_ids[2] =
{
    "::Ice::Object",
    "::jderobot::NamingNode"
};

}

bool
jderobot::NamingNode::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__jderobot__NamingNode_ids, __jderobot__NamingNode_ids + 2, _s);
}

::std::vector< ::std::string>
jderobot::NamingNode::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__jderobot__NamingNode_ids[0], &__jderobot__NamingNode_ids[2]);
}

const ::std::string&
jderobot::NamingNode::ice_id(const ::Ice::Current&) const
{
    return __jderobot__NamingNode_ids[1];
}

const ::std::string&
jderobot::NamingNode::ice_staticId()
{
    return __jderobot__NamingNode_ids[1];
}

void
jderobot::NamingNode::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(name);
    __os->write(interfaceName);
    __os->write(protocol);
    __os->write(ip);
    __os->write(port);
    __os->endWriteSlice();
}

void
jderobot::NamingNode::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(name);
    __is->read(interfaceName);
    __is->read(protocol);
    __is->read(ip);
    __is->read(port);
    __is->endReadSlice();
}

namespace
{

class __F__jderobot__NamingNode : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::jderobot::NamingNode::ice_staticId());
        return new ::jderobot::NamingNode;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__jderobot__NamingNode_Ptr = new __F__jderobot__NamingNode;

class __F__jderobot__NamingNode__Init
{
public:

    __F__jderobot__NamingNode__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::jderobot::NamingNode::ice_staticId(), __F__jderobot__NamingNode_Ptr);
    }

    ~__F__jderobot__NamingNode__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::jderobot::NamingNode::ice_staticId());
    }
};

const __F__jderobot__NamingNode__Init __F__jderobot__NamingNode__i;

}

const ::Ice::ObjectFactoryPtr&
jderobot::NamingNode::ice_factory()
{
    return __F__jderobot__NamingNode_Ptr;
}

void 
jderobot::__patch(NamingNodePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::jderobot::NamingNodePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::jderobot::NamingNode::ice_staticId(), v);
    }
}

::Ice::Object* jderobot::upCast(::jderobot::NodeContainer* p) { return p; }
::Ice::ObjectPtr
jderobot::NodeContainer::ice_clone() const
{
    ::Ice::Object* __p = new NodeContainer(*this);
    return __p;
}

namespace
{
const ::std::string __jderobot__NodeContainer_ids[2] =
{
    "::Ice::Object",
    "::jderobot::NodeContainer"
};

}

bool
jderobot::NodeContainer::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__jderobot__NodeContainer_ids, __jderobot__NodeContainer_ids + 2, _s);
}

::std::vector< ::std::string>
jderobot::NodeContainer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__jderobot__NodeContainer_ids[0], &__jderobot__NodeContainer_ids[2]);
}

const ::std::string&
jderobot::NodeContainer::ice_id(const ::Ice::Current&) const
{
    return __jderobot__NodeContainer_ids[1];
}

const ::std::string&
jderobot::NodeContainer::ice_staticId()
{
    return __jderobot__NodeContainer_ids[1];
}

void
jderobot::NodeContainer::__addObject(::IceInternal::GCCountMap& _c)
{
    ::IceInternal::GCCountMap::iterator pos = _c.find(this);
    if(pos == _c.end())
    {
        _c[this] = 1;
    }
    else
    {
        ++pos->second;
    }
}

bool
jderobot::NodeContainer::__usesGC()
{
    return true;
}

void
jderobot::NodeContainer::__gcReachable(::IceInternal::GCCountMap& _c) const
{
    {
        for(::jderobot::nodeList::const_iterator _i0 = nodes.begin(); _i0 != nodes.end(); ++_i0)
        {
            if((*_i0))
            {
                ::jderobot::upCast((*_i0).get())->__addObject(_c);
            }
        }
    }
}

void
jderobot::NodeContainer::__gcClear()
{
    {
        for(::jderobot::nodeList::iterator _i0 = nodes.begin(); _i0 != nodes.end(); ++_i0)
        {
            if((*_i0))
            {
                if(::jderobot::upCast((*_i0).get())->__usesGC())
                {
                    ::jderobot::upCast((*_i0).get())->__decRefUnsafe();
                    (*_i0).__clearHandleUnsafe();
                }
                else
                {
                    (*_i0) = 0;
                }
            }
        }
    }
}

void
jderobot::NodeContainer::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(nodes);
    __os->endWriteSlice();
}

void
jderobot::NodeContainer::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(nodes);
    __is->endReadSlice();
}

namespace
{

class __F__jderobot__NodeContainer : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::jderobot::NodeContainer::ice_staticId());
        return new ::jderobot::NodeContainer;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__jderobot__NodeContainer_Ptr = new __F__jderobot__NodeContainer;

class __F__jderobot__NodeContainer__Init
{
public:

    __F__jderobot__NodeContainer__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::jderobot::NodeContainer::ice_staticId(), __F__jderobot__NodeContainer_Ptr);
    }

    ~__F__jderobot__NodeContainer__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::jderobot::NodeContainer::ice_staticId());
    }
};

const __F__jderobot__NodeContainer__Init __F__jderobot__NodeContainer__i;

}

const ::Ice::ObjectFactoryPtr&
jderobot::NodeContainer::ice_factory()
{
    return __F__jderobot__NodeContainer_Ptr;
}

void 
jderobot::__patch(NodeContainerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::jderobot::NodeContainerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::jderobot::NodeContainer::ice_staticId(), v);
    }
}

::Ice::Object* jderobot::upCast(::jderobot::NamingService* p) { return p; }

namespace
{
const ::std::string __jderobot__NamingService_ids[2] =
{
    "::Ice::Object",
    "::jderobot::NamingService"
};

}

bool
jderobot::NamingService::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__jderobot__NamingService_ids, __jderobot__NamingService_ids + 2, _s);
}

::std::vector< ::std::string>
jderobot::NamingService::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__jderobot__NamingService_ids[0], &__jderobot__NamingService_ids[2]);
}

const ::std::string&
jderobot::NamingService::ice_id(const ::Ice::Current&) const
{
    return __jderobot__NamingService_ids[1];
}

const ::std::string&
jderobot::NamingService::ice_staticId()
{
    return __jderobot__NamingService_ids[1];
}

::Ice::DispatchStatus
jderobot::NamingService::___bind(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::jderobot::NamingNodePtr node;
    __is->read(node);
    __is->readPendingObjects();
    __inS.endReadParams();
    try
    {
        bind(node, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::jderobot::NameAlreadyExistException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
jderobot::NamingService::___unbind(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::jderobot::NamingNodePtr node;
    __is->read(node);
    __is->readPendingObjects();
    __inS.endReadParams();
    try
    {
        unbind(node, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::jderobot::NameAlreadyExistException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::jderobot::NameNotExistException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
jderobot::NamingService::___resolveByName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string name;
    __is->read(name);
    __inS.endReadParams();
    try
    {
        ::jderobot::NodeContainerPtr __ret = resolveByName(name, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __os->writePendingObjects();
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::jderobot::NameNotExistException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
jderobot::NamingService::___resolveByInterface(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string interfaceName;
    __is->read(interfaceName);
    __inS.endReadParams();
    try
    {
        ::jderobot::NodeContainerPtr __ret = resolveByInterface(interfaceName, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __os->writePendingObjects();
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::jderobot::InterfaceNotExistException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __jderobot__NamingService_all[] =
{
    "bind",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "resolveByInterface",
    "resolveByName",
    "unbind"
};

}

::Ice::DispatchStatus
jderobot::NamingService::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__jderobot__NamingService_all, __jderobot__NamingService_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __jderobot__NamingService_all)
    {
        case 0:
        {
            return ___bind(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___resolveByInterface(in, current);
        }
        case 6:
        {
            return ___resolveByName(in, current);
        }
        case 7:
        {
            return ___unbind(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
jderobot::NamingService::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
jderobot::NamingService::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
jderobot::__patch(NamingServicePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::jderobot::NamingServicePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::jderobot::NamingService::ice_staticId(), v);
    }
}
